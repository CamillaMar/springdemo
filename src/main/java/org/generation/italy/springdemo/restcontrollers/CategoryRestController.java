package org.generation.italy.springdemo.restcontrollers;

import org.generation.italy.springdemo.models.entities.Category;
import org.generation.italy.springdemo.models.exceptions.DataException;
import org.generation.italy.springdemo.models.services.StoreService;
import org.generation.italy.springdemo.restdtos.CategoryRestDto;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.net.URI;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/categories")
public class CategoryRestController {
    private StoreService storeService;

    @Autowired
    public CategoryRestController(StoreService storeService){
        this.storeService=storeService;
    }

    @GetMapping
    ResponseEntity<List<CategoryRestDto>> getAllCategories() throws DataException {
        List<Category> categories= storeService.findAllCategories();
        return ResponseEntity.ok(categories.stream().map(CategoryRestDto::toDto).toList());
    }

    @GetMapping("/{id}")
    ResponseEntity<CategoryRestDto> getCategoryById(@PathVariable int id) throws DataException {
        Optional<Category> optionalCategory=storeService.findCategoryById(id);
        if(optionalCategory.isEmpty()){
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(CategoryRestDto.toDto(optionalCategory.get()));
    }

    @PostMapping
    ResponseEntity<?> addCategory(@RequestBody CategoryRestDto dto) throws DataException{
        if(dto.getCategoryId()!=null){
            return ResponseEntity.badRequest().body("Category id is autogenerated. Do not specify it");
        }

        Category savedCategory = storeService.saveCategory(dto.toCategory());
        URI location = ServletUriComponentsBuilder
                .fromCurrentRequest()
                .path("/{id}")
                .buildAndExpand(savedCategory.getCategoryId())
                .toUri();
        return ResponseEntity.created(location).body(CategoryRestDto.toDto(savedCategory));
    }

    @DeleteMapping("/{id}")
    ResponseEntity<Void> deleteCategory(@PathVariable int id) throws DataException {
        Optional <Category> optionalCategory=storeService.findCategoryById(id);
        if(optionalCategory.isEmpty()){
            return ResponseEntity.notFound().build();
        }
        storeService.deleteCategory(optionalCategory.get());
        return ResponseEntity.noContent().build();
    }

}
